name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: false
        type: boolean

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(grep -m1 'version = ' setup.py | cut -d'"' -f2)
        echo "Current version: $VERSION"
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT=${{ steps.current_version.outputs.current_version }}
        TYPE=${{ github.event.inputs.version_type }}
        
        # Split version into parts
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        
        # Increment based on type
        case $TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
          NEW_VERSION="${NEW_VERSION}-beta"
        fi
        
        echo "New version will be: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in files
      run: |
        NEW_VERSION=${{ steps.new_version.outputs.new_version }}
        
        # Update setup.py
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" setup.py
        
        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" networkmonitor/__init__.py
        
        # Update package.json if it exists
        if [ -f "networkmonitor/web/package.json" ]; then
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" networkmonitor/web/package.json
        fi
        
        # Update installer.nsi
        if [ -f installer.nsi ]; then
          sed -i "s/!define VERSION \".*\"/!define VERSION \"$NEW_VERSION\"/" installer.nsi
        fi
        
        # Update pyproject.toml if it exists
        if [ -f pyproject.toml ]; then
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        if [ "$LAST_TAG" = "none" ]; then
          COMMITS=$(git log --pretty=format:"- %s")
        else
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s")
        fi
        
        # Create changelog entry
        {
          echo "# Changelog"
          echo ""
          echo "## Version ${{ steps.new_version.outputs.new_version }}"
          echo ""
          echo "### Changes"
          echo "$COMMITS"
          echo ""
          if [ -f CHANGELOG.md ]; then
            echo "### Previous Versions"
            cat CHANGELOG.md
          fi
        } > CHANGELOG.new
        mv CHANGELOG.new CHANGELOG.md
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        commit-message: |
          chore: bump version to ${{ steps.new_version.outputs.new_version }}
          
          - Updated version numbers across all platform builds
          - Generated changelog
          - Prepared for ${{ github.event.inputs.prerelease == 'true' && 'pre-release' || 'release' }}
        title: "Version bump to ${{ steps.new_version.outputs.new_version }}"
        body: |
          # Version Bump: ${{ steps.new_version.outputs.new_version }}
          
          This PR prepares for the ${{ github.event.inputs.prerelease == 'true' && 'pre-release' || 'release' }} of version ${{ steps.new_version.outputs.new_version }}.
          
          ## Changes
          - Updated version in all configuration files
          - Generated changelog entries
          - Prepared release artifacts
          
          ## Changelog
          ```
          ${{ steps.changelog.outputs.changelog }}
          ```
          
          ## Next Steps
          1. Review the changes
          2. Merge this PR
          3. A new tag `${{ steps.new_version.outputs.version_tag }}` will be created
          4. Release workflow will automatically:
             - Build all platform versions
             - Create GitHub release
             - Upload artifacts
             - Update documentation
        branch: "version-bump/${{ steps.new_version.outputs.new_version }}"
        base: "main"
        labels: |
          version-bump
          automated pr
          ${{ github.event.inputs.prerelease == 'true' && 'pre-release' || 'release' }}
        reviewers: "umerfarok"
    
    - name: Create Git Tag
      if: github.event.pull_request.merged == true
      run: |
        git tag ${{ steps.new_version.outputs.version_tag }}
        git push origin ${{ steps.new_version.outputs.version_tag }}